<?php
/**
 * ReverseApi
 * PHP version 5
 *
 * @category Class
 * @package  LocationIq
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * LocationIQ
 *
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace LocationIq\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use LocationIq\ApiException;
use LocationIq\Configuration;
use LocationIq\HeaderSelector;
use LocationIq\ObjectSerializer;

/**
 * ReverseApi Class Doc Comment
 *
 * @category Class
 * @package  LocationIq
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReverseApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation reverse
     *
     * Reverse Geocoding
     *
     * @param  float $lat Latitude of the location to generate an address for. (required)
     * @param  float $lon Longitude of the location to generate an address for. (required)
     * @param  string $format Format to geocode. Only JSON supported for SDKs (required)
     * @param  int $normalizecity Normalizes village to city level data to city (required)
     * @param  int $addressdetails Include a breakdown of the address into elements. Defaults to 1. (optional, default to 1)
     * @param  string $accept_language Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language&#x3D;native (optional)
     * @param  int $namedetails Include a list of alternative names in the results. These may include language variants, references, operator and brand. (optional)
     * @param  int $extratags Include additional information in the result if available, e.g. wikipedia link, opening hours. (optional)
     *
     * @throws \LocationIq\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LocationIq\Model\Location|\LocationIq\Model\Error|\LocationIq\Model\Error|\LocationIq\Model\Error|\LocationIq\Model\Error|\LocationIq\Model\Error
     */
    public function reverse($lat, $lon, $format, $normalizecity, $addressdetails = 1, $accept_language = null, $namedetails = null, $extratags = null)
    {
        list($response) = $this->reverseWithHttpInfo($lat, $lon, $format, $normalizecity, $addressdetails, $accept_language, $namedetails, $extratags);
        return $response;
    }

    /**
     * Operation reverseWithHttpInfo
     *
     * Reverse Geocoding
     *
     * @param  float $lat Latitude of the location to generate an address for. (required)
     * @param  float $lon Longitude of the location to generate an address for. (required)
     * @param  string $format Format to geocode. Only JSON supported for SDKs (required)
     * @param  int $normalizecity Normalizes village to city level data to city (required)
     * @param  int $addressdetails Include a breakdown of the address into elements. Defaults to 1. (optional, default to 1)
     * @param  string $accept_language Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language&#x3D;native (optional)
     * @param  int $namedetails Include a list of alternative names in the results. These may include language variants, references, operator and brand. (optional)
     * @param  int $extratags Include additional information in the result if available, e.g. wikipedia link, opening hours. (optional)
     *
     * @throws \LocationIq\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LocationIq\Model\Location|\LocationIq\Model\Error|\LocationIq\Model\Error|\LocationIq\Model\Error|\LocationIq\Model\Error|\LocationIq\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function reverseWithHttpInfo($lat, $lon, $format, $normalizecity, $addressdetails = 1, $accept_language = null, $namedetails = null, $extratags = null)
    {
        $request = $this->reverseRequest($lat, $lon, $format, $normalizecity, $addressdetails, $accept_language, $namedetails, $extratags);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\LocationIq\Model\Location' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ('\LocationIq\Model\Location' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LocationIq\Model\Location', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\LocationIq\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ('\LocationIq\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LocationIq\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\LocationIq\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ('\LocationIq\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LocationIq\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\LocationIq\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ('\LocationIq\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LocationIq\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\LocationIq\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ('\LocationIq\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LocationIq\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\LocationIq\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ('\LocationIq\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LocationIq\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LocationIq\Model\Location';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LocationIq\Model\Location',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LocationIq\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LocationIq\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LocationIq\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LocationIq\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LocationIq\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reverseAsync
     *
     * Reverse Geocoding
     *
     * @param  float $lat Latitude of the location to generate an address for. (required)
     * @param  float $lon Longitude of the location to generate an address for. (required)
     * @param  string $format Format to geocode. Only JSON supported for SDKs (required)
     * @param  int $normalizecity Normalizes village to city level data to city (required)
     * @param  int $addressdetails Include a breakdown of the address into elements. Defaults to 1. (optional, default to 1)
     * @param  string $accept_language Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language&#x3D;native (optional)
     * @param  int $namedetails Include a list of alternative names in the results. These may include language variants, references, operator and brand. (optional)
     * @param  int $extratags Include additional information in the result if available, e.g. wikipedia link, opening hours. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reverseAsync($lat, $lon, $format, $normalizecity, $addressdetails = 1, $accept_language = null, $namedetails = null, $extratags = null)
    {
        return $this->reverseAsyncWithHttpInfo($lat, $lon, $format, $normalizecity, $addressdetails, $accept_language, $namedetails, $extratags)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reverseAsyncWithHttpInfo
     *
     * Reverse Geocoding
     *
     * @param  float $lat Latitude of the location to generate an address for. (required)
     * @param  float $lon Longitude of the location to generate an address for. (required)
     * @param  string $format Format to geocode. Only JSON supported for SDKs (required)
     * @param  int $normalizecity Normalizes village to city level data to city (required)
     * @param  int $addressdetails Include a breakdown of the address into elements. Defaults to 1. (optional, default to 1)
     * @param  string $accept_language Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language&#x3D;native (optional)
     * @param  int $namedetails Include a list of alternative names in the results. These may include language variants, references, operator and brand. (optional)
     * @param  int $extratags Include additional information in the result if available, e.g. wikipedia link, opening hours. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reverseAsyncWithHttpInfo($lat, $lon, $format, $normalizecity, $addressdetails = 1, $accept_language = null, $namedetails = null, $extratags = null)
    {
        $returnType = '\LocationIq\Model\Location';
        $request = $this->reverseRequest($lat, $lon, $format, $normalizecity, $addressdetails, $accept_language, $namedetails, $extratags);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reverse'
     *
     * @param  float $lat Latitude of the location to generate an address for. (required)
     * @param  float $lon Longitude of the location to generate an address for. (required)
     * @param  string $format Format to geocode. Only JSON supported for SDKs (required)
     * @param  int $normalizecity Normalizes village to city level data to city (required)
     * @param  int $addressdetails Include a breakdown of the address into elements. Defaults to 1. (optional, default to 1)
     * @param  string $accept_language Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language&#x3D;native (optional)
     * @param  int $namedetails Include a list of alternative names in the results. These may include language variants, references, operator and brand. (optional)
     * @param  int $extratags Include additional information in the result if available, e.g. wikipedia link, opening hours. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reverseRequest($lat, $lon, $format, $normalizecity, $addressdetails = 1, $accept_language = null, $namedetails = null, $extratags = null)
    {
        // verify the required parameter 'lat' is set
        if ($lat === null || (is_array($lat) && count($lat) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lat when calling reverse'
            );
        }
        if ($lat > 90) {
            throw new \InvalidArgumentException('invalid value for "$lat" when calling ReverseApi.reverse, must be smaller than or equal to 90.');
        }
        if ($lat < -90) {
            throw new \InvalidArgumentException('invalid value for "$lat" when calling ReverseApi.reverse, must be bigger than or equal to -90.');
        }

        // verify the required parameter 'lon' is set
        if ($lon === null || (is_array($lon) && count($lon) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lon when calling reverse'
            );
        }
        if ($lon > 180) {
            throw new \InvalidArgumentException('invalid value for "$lon" when calling ReverseApi.reverse, must be smaller than or equal to 180.');
        }
        if ($lon < -180) {
            throw new \InvalidArgumentException('invalid value for "$lon" when calling ReverseApi.reverse, must be bigger than or equal to -180.');
        }

        // verify the required parameter 'format' is set
        if ($format === null || (is_array($format) && count($format) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $format when calling reverse'
            );
        }
        // verify the required parameter 'normalizecity' is set
        if ($normalizecity === null || (is_array($normalizecity) && count($normalizecity) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $normalizecity when calling reverse'
            );
        }

        $resourcePath = '/reverse.php';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($lat !== null) {
            $queryParams['lat'] = ObjectSerializer::toQueryValue($lat);
        }
        // query params
        if ($lon !== null) {
            $queryParams['lon'] = ObjectSerializer::toQueryValue($lon);
        }
        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }
        // query params
        if ($normalizecity !== null) {
            $queryParams['normalizecity'] = ObjectSerializer::toQueryValue($normalizecity);
        }
        // query params
        if ($addressdetails !== null) {
            $queryParams['addressdetails'] = ObjectSerializer::toQueryValue($addressdetails);
        }
        // query params
        if ($accept_language !== null) {
            $queryParams['accept-language'] = ObjectSerializer::toQueryValue($accept_language);
        }
        // query params
        if ($namedetails !== null) {
            $queryParams['namedetails'] = ObjectSerializer::toQueryValue($namedetails);
        }
        // query params
        if ($extratags !== null) {
            $queryParams['extratags'] = ObjectSerializer::toQueryValue($extratags);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('key');
        if ($apiKey !== null) {
            $queryParams['key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
